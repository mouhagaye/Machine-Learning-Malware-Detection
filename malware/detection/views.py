from django.shortcuts import render
from .malware import *
from .models import *
import shutil
import json
from django.http import JsonResponse

from django.http import HttpResponse, HttpResponseRedirect
from django.template import loader
from django.contrib.auth import login, logout, authenticate
from django.urls import reverse
import datetime
import pytz



# Create your views here.

def index(request):
    if not request.user.is_authenticated:
        return render(request, "index.html")
    context = {
        "user": request.user
    }
    return render(request, "detection.html", context)

def detection(request):
    return render(request,'detection.html')

def analyse(request):
    path = ''
    path = request.POST.get("path")

    if path == '':
        return JsonResponse({"success":False})
    else:
        print("===============Le chemin est ",path)
        print("=====================",os.getcwd())
    
        nom = path.split('\\')
        nom = nom[-1]

    clf = joblib.load('detection/classifier/classifier.pkl')
    features = pickle.loads(open(os.path.join('detection/classifier/features.pkl'),'rb').read())
    try:
        data = extract_infos(path)
        pe_features = list(map(lambda x:data[x], features))
        res= clf.predict([pe_features])[0]
        res =  ['malware', 'sain'][res]
        #print('Le fichier %s est un %s' % (path,['malware', 'fichier sain'][res])
        #os.unlink(path)
    except:
        return JsonResponse({"success":False})
    fichier = Fichier(name=nom,verdict=res)
    fichier.save()
    print("=============="+res+"=====================")
    return JsonResponse({"success":True,"verdict":res})

def supprimer(request):
    path = request.POST.get("path")
    try:
        os.remove(path)
        print("=================Suppression reussi==================")

    except:
        return JsonResponse({"success":False}) 

    return JsonResponse({"success":True})

def quarantaine(request):
    path = request.POST.get("path")
    try:
        shutil.move(path, "C:/Users/Mouhamadou Gaye/Documents/Projet Python/StageSonatel/Websites/malware/detection/Quarantaine")
        print("=================Quarantaine Reussit ==================")

    except:
        return JsonResponse({"success":False})
    return JsonResponse({"success":True})

def login_view(request):
    username = request.POST["username"]
    password = request.POST["password"]
    user = authenticate(request, username=username, password=password)

    if username is not None:
        try:
            login(request, user)
            return HttpResponseRedirect(reverse("detection"))
        except:
            contexte = {
                "message":"Nom d'utilisateur ou Mot de passe incorrect !"
            }
            return render(request,"index.html",contexte)
    else:
        return render(request,"index.html")


def logout_view(request):
    logout(request)
    return render(request, 'index.html')

def database(request):

    sain = 0
    malware = 0
    jours = [0, 0, 0, 0, 0, 0, 0]
    daysName = ['Lundi','Mardi','Mercredi','Jeudi','Vendredi','Samedi','Dimanche']
    days = []
    reference = datetime.datetime.now() - datetime.timedelta(days=7)
    reference = pytz.utc.localize(reference)
    referenceId = reference.weekday()
    semaine = []
    today = referenceId + 7

    for j in range(referenceId + 1 , today + 1):
        days.append(j % 7)
    print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>days :",days)
    for day in days:
        semaine.append(daysName[day])

    print("La semaine :",semaine)
    listes = []
    fichiers = Fichier.objects.all().order_by("-id")
    for fichier in fichiers:
        if fichier.verdict == 'malware':
            malware = malware + 1
            for i,jour in enumerate(semaine):
                if fichier.jour == jour and (fichier.created > reference):
                    jours[i] = jours[i] + 1
                print("jour:"+jour+",fichier.jour:"+fichier.jour+"\n")
        else:
            sain = sain + 1

        listes.append({"nom":fichier.name, "verdict":fichier.verdict, "creation":fichier.created, 'id':fichier.id})
        print(fichier)


    context = {"fichiers":listes,"malwares":malware,"sains":sain,"jours":jours,"semaine":days}

    return render(request,"tables.html",context)